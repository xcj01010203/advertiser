<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-autowire="byName" default-lazy-init="true">

	<description>Spring配置</description>

	<context:component-scan base-package="com.xiaotu">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="propertyConfigurer" class="com.xiaotu.common.util.PropertiesUtil">
		<property name="locations">
			<list>
				<value>classpath*:*.properties</value>
			</list>
		</property>
	</bean>


	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>


	<!-- 数据库配置start -->
	<!-- MYSQL数据源 -->
	<bean id="dataSource4MySQL" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${mysql.jdbc.driver}" />
		<property name="url" value="${mysql.jdbc.url}" />
		<property name="username" value="${mysql.jdbc.username}" />
		<property name="password" value="${mysql.jdbc.password}" />
		<!-- Connection Pooling Info -->
		<property name="initialSize" value="100" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="30" />
		<property name="maxWait" value="500" />
		<property name="poolPreparedStatements" value="false" />
		<property name="defaultAutoCommit" value="false" />
	</bean>


	<!-- PostgreSQL数据源配置 -->
	<bean id="dataSource4PG" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${pg.jdbc.driver}" />
		<property name="url" value="${pg.jdbc.url}" />
		<property name="username" value="${pg.jdbc.username}" />
		<property name="password" value="${pg.jdbc.password}" />
		<!-- Connection Pooling Info -->
		<property name="initialSize" value="5" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="30" />
		<property name="maxWait" value="500" />

		<property name="poolPreparedStatements" value="false" />
		<property name="defaultAutoCommit" value="false" />
		<property name="validationQuery" value="select 1" />

		<!-- 设置自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 自动回收超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="60" />
		<!-- 设置在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true" />
	</bean>

	<!-- 动态数据源配置,默认为mysql -->
	<bean id="dataSource" class="com.xiaotu.common.db.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="dataSource4MySQL" key="MySQL"></entry>
				<entry value-ref="dataSource4PG" key="PostgreSQL"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource4MySQL"></property>
	</bean>

	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.xiaotu.advertiser.*.service..*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="*" propagation="NOT_SUPPORTED" />
			<!-- <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" 
				/> -->
			<!-- <tx:method name="*" propagation="REQUIRED" rollback-for="Throwable" 
				/> -->
		</tx:attributes>
	</tx:advice>
	<!-- 数据库配置 end -->


	<!-- redis缓存相关配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- <property name="maxWait" value="${redis.maxWait}" /> -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<property name="testOnReturn" value="${redis.testOnReturn}" />
		<!-- <property name="testWhileIdle" value="true"/> -->
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" scope="singleton">
		<constructor-arg index="0" ref="jedisPoolConfig" name="poolConfig" />
		<constructor-arg index="1" value="${redis.host}" name="host" />
		<constructor-arg index="2" value="${redis.port}" name="port" />

		<!-- <constructor-arg index="3" value="${redis.timeout}" name="timeout" 
			/> <constructor-arg index="4" value="${redis.password}" name="password" /> -->
	</bean>

	<!-- 将相应数据封装成统一的格式并返回给客户端（ios或web） -->
	<bean id="clientResponseAspect" class="com.xiaotu.advertiser.common.aop.ClientResponseAspect"></bean>
	<!-- 日志管理 -->
	<bean id="logResponseAspect" class="com.xiaotu.advertiser.common.aop.LogsAspect"></bean>
	<!-- 设置默认数据源 -->
	<bean id="dataSourceAspet" class="com.xiaotu.advertiser.common.aop.DataSourceAspect"></bean>

	<aop:config>

		<aop:aspect id="clientResponse" ref="clientResponseAspect" order="1">
			<aop:pointcut id="allBusiFunc" expression="execution(* com.xiaotu.advertiser.*.controller..*.*(..)) and !execution(* com.xiaotu.advertiser.user.controller.LoginController.*(..))" />
			<aop:around pointcut-ref="allBusiFunc" method="aroundMethod" />
		</aop:aspect>
		<!-- 日志管理 -->
		<aop:aspect id="logResponse" ref="logResponseAspect" order="2">
			<aop:pointcut id="logResponsePointCut" expression="execution(* com.xiaotu.advertiser.*.controller..*.*(..)) and !execution(* com.xiaotu.advertiser.user.controller.LogManageController.*(..))" />
			<aop:after-returning pointcut-ref="logResponsePointCut" method="after"/>
			<aop:after-throwing pointcut-ref="logResponsePointCut" method="doThrow" throwing="e"/>
		</aop:aspect>
		
		<!-- 设置默认数据源 -->
		<aop:aspect id="dataSource" ref="dataSourceAspet" order="3">
			<aop:pointcut id="dataSourcePointCut" expression="execution(* com.xiaotu.advertiser.*.controller..*.*(..))" />
			<aop:after pointcut-ref="dataSourcePointCut" method="setDataSource"/>
		</aop:aspect>
		
	</aop:config>
</beans>